// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StaplePuck.Data;

namespace StaplePuck.Data.Migrations
{
    [DbContext(typeof(StaplePuckContext))]
    partial class StaplePuckContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("StaplePuck.Core.Fantasy.FantasyTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsValid")
                        .HasColumnType("boolean");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Rank")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("TodaysScore")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId");

                    b.ToTable("FantasyTeams");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.FantasyTeamPlayers", b =>
                {
                    b.Property<int>("FantasyTeamId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("FantasyTeamId", "PlayerId");

                    b.HasIndex("LeagueId", "PlayerId");

                    b.HasIndex("PlayerId", "SeasonId");

                    b.ToTable("FantasyTeamPlayers");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.League", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AllowMultipleTeams")
                        .HasColumnType("boolean");

                    b.Property<string>("Announcement")
                        .HasColumnType("text");

                    b.Property<int>("CommissionerId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PaymentInfo")
                        .HasColumnType("text");

                    b.Property<int>("PlayersPerTeam")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CommissionerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.LeagueMail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GameDateId")
                        .HasColumnType("text");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameDateId");

                    b.HasIndex("LeagueId");

                    b.ToTable("LeagueMails");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.NotificationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("NotificationTokens");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.NumberPerPosition", b =>
                {
                    b.Property<int>("PositionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.HasKey("PositionTypeId", "LeagueId");

                    b.HasIndex("LeagueId");

                    b.ToTable("NumberPerPositions");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.ScoringRulePoints", b =>
                {
                    b.Property<int>("PositionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ScoringTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("PointsPerScore")
                        .HasColumnType("integer");

                    b.Property<float>("ScoringWeight")
                        .HasColumnType("real");

                    b.HasKey("PositionTypeId", "ScoringTypeId", "LeagueId");

                    b.HasIndex("LeagueId");

                    b.HasIndex("ScoringTypeId");

                    b.ToTable("ScoringRulePoints");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("ReceiveEmails")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceiveNegativeNotifications")
                        .HasColumnType("boolean");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("StaplePuck.Core.Scoring.CalculatedScoreItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("ScoringTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TodaysScore")
                        .HasColumnType("integer");

                    b.Property<int>("TodaysTotal")
                        .HasColumnType("integer");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ScoringTypeId");

                    b.HasIndex("LeagueId", "PlayerId");

                    b.ToTable("CalculatedScoreItems");
                });

            modelBuilder.Entity("StaplePuck.Core.Scoring.PlayerCalculatedScore", b =>
                {
                    b.Property<int>("LeagueId")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("GameState")
                        .HasColumnType("integer");

                    b.Property<int>("NumberOfSelectedByTeams")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TodaysScore")
                        .HasColumnType("integer");

                    b.HasKey("LeagueId", "PlayerId");

                    b.HasIndex("PlayerId", "SeasonId");

                    b.ToTable("PlayerCalculatedScores");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.GameDate", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GameDates");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.GameDateSeason", b =>
                {
                    b.Property<string>("GameDateId")
                        .HasColumnType("text");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("GameDateId", "SeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("GameDateSeason");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalId2")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PlayerScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<bool>("AdminOverride")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerStatsOnDateId")
                        .HasColumnType("integer");

                    b.Property<int>("ScoringTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Total")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerStatsOnDateId");

                    b.HasIndex("ScoringTypeId");

                    b.ToTable("PlayerScores");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PlayerSeason", b =>
                {
                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.HasKey("PlayerId", "SeasonId");

                    b.HasIndex("PositionTypeId");

                    b.HasIndex("SeasonId", "TeamId");

                    b.HasIndex("TeamId", "SeasonId");

                    b.ToTable("PlayerSeasons");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PlayerStatsOnDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("GameDateId")
                        .HasColumnType("text");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameDateId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerStatsOnDates");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PositionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.ScoringPositions", b =>
                {
                    b.Property<int>("PositionTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("ScoringTypeId")
                        .HasColumnType("integer");

                    b.HasKey("PositionTypeId", "ScoringTypeId");

                    b.HasIndex("ScoringTypeId");

                    b.ToTable("ScoringPositions");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.ScoringType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("ScoringTypes");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ExternalId")
                        .HasColumnType("text");

                    b.Property<string>("ExternalPlayerUrl")
                        .HasColumnType("text");

                    b.Property<string>("ExternalPlayerUrl2")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("IsPlayoffs")
                        .HasColumnType("boolean");

                    b.Property<int>("SportId")
                        .HasColumnType("integer");

                    b.Property<int>("StartRound")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SportId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.Sport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sports");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ExternalId")
                        .HasColumnType("integer");

                    b.Property<string>("ExternalId2")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("LocationName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ShortName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.TeamSeason", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.HasKey("TeamId", "SeasonId");

                    b.HasIndex("SeasonId");

                    b.ToTable("TeamSeasons");
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.TeamStateForSeason", b =>
                {
                    b.Property<int>("SeasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TeamId")
                        .HasColumnType("integer");

                    b.Property<int>("GameState")
                        .HasColumnType("integer");

                    b.HasKey("SeasonId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamStateForSeason");
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.FantasyTeam", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Fantasy.User", "GM")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.FantasyTeamPlayers", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.FantasyTeam", "FantasyTeam")
                        .WithMany("FantasyTeamPlayers")
                        .HasForeignKey("FantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Player", "Player")
                        .WithMany("FantasyTeamPlayers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Scoring.PlayerCalculatedScore", "PlayerCalculatedScore")
                        .WithMany("FantasyTeamPlayers")
                        .HasForeignKey("LeagueId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.PlayerSeason", "PlayerSeason")
                        .WithMany("FantasyTeamPlayers")
                        .HasForeignKey("PlayerId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.League", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.User", "Commissioner")
                        .WithMany()
                        .HasForeignKey("CommissionerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Season", "Season")
                        .WithMany("Leagues")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.LeagueMail", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.GameDate", "GameDate")
                        .WithMany()
                        .HasForeignKey("GameDateId");

                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany("LeagueMails")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.NotificationToken", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.User", "User")
                        .WithMany("NotificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.NumberPerPosition", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany("NumberPerPositions")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.PositionType", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Fantasy.ScoringRulePoints", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany("ScoringRules")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.PositionType", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.ScoringType", "ScoringType")
                        .WithMany()
                        .HasForeignKey("ScoringTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Scoring.CalculatedScoreItem", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany()
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.ScoringType", "ScoringType")
                        .WithMany()
                        .HasForeignKey("ScoringTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Scoring.PlayerCalculatedScore", "PlayerCalculatedScore")
                        .WithMany("Scoring")
                        .HasForeignKey("LeagueId", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Scoring.PlayerCalculatedScore", b =>
                {
                    b.HasOne("StaplePuck.Core.Fantasy.League", "League")
                        .WithMany("PlayerCalculatedScores")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.PlayerSeason", "PlayerSeason")
                        .WithMany("PlayerCalculatedScores")
                        .HasForeignKey("PlayerId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.GameDateSeason", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.GameDate", "GameDate")
                        .WithMany("GameDateSeasons")
                        .HasForeignKey("GameDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Season", "Season")
                        .WithMany("GameDates")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.Player", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PlayerScore", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.PlayerStatsOnDate", "PlayerStatsOnDate")
                        .WithMany("PlayerScores")
                        .HasForeignKey("PlayerStatsOnDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.ScoringType", "ScoringType")
                        .WithMany()
                        .HasForeignKey("ScoringTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PlayerSeason", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Player", "Player")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.PositionType", "PositionType")
                        .WithMany()
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Season", "Season")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.TeamStateForSeason", "TeamStateForSeason")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("SeasonId", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.TeamSeason", "TeamSeason")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("TeamId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PlayerStatsOnDate", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.GameDate", "GameDate")
                        .WithMany("PlayersStatsOnDate")
                        .HasForeignKey("GameDateId");

                    b.HasOne("StaplePuck.Core.Stats.Player", "Player")
                        .WithMany("StatsOnDate")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.PositionType", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Sport", "Sport")
                        .WithMany("PositionTypes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.ScoringPositions", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.PositionType", "PositionType")
                        .WithMany("ScoringPositions")
                        .HasForeignKey("PositionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.ScoringType", "ScoringType")
                        .WithMany("ScoringPositions")
                        .HasForeignKey("ScoringTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.ScoringType", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Sport", "Sport")
                        .WithMany("ScoringTypes")
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.Season", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Sport", "Sport")
                        .WithMany()
                        .HasForeignKey("SportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.TeamSeason", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Season", "Season")
                        .WithMany("TeamSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StaplePuck.Core.Stats.TeamStateForSeason", b =>
                {
                    b.HasOne("StaplePuck.Core.Stats.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StaplePuck.Core.Stats.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
